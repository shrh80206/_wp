//1. 計算字串中字母出現的次數
function countLetters(str) {
    const A = new Map();
    for (let B of str) {
        A.set(B, (A.get(B) || 0) + 1);
    }
    return A;
}
console.log(countLetters("banana"));
//2. 陣列去重並排序
function uniqueSorted(arr) {
    return [...new Set(arr)].sort((A, B) => A - B);
}
console.log(uniqueSorted([5, 3, 8, 3, 1, 5, 8]));
//3. 陣列總和
function sumArray(arr) {
    return arr.reduce((A, B) => A + B, 0);
}
console.log(sumArray([1, 2, 3, 4]));
//4. 物件深度合併
function deepMerge(obj1, obj2) {
    const A = structuredClone(obj1);
    for (let B in obj2) {
        if (obj2[B] instanceof Object && B in A) {
            A[B] = deepMerge(A[B], obj2[B]);
        } else {
            A[B] = obj2[B];
        }
    }
    return A;
}
const obj1 = { a: 1, b: { x: 2, y: 3 } };
const obj2 = { b: { y: 5, z: 6 }, c: 7 };
console.log(deepMerge(obj1, obj2));
5. 類別與繼承
class Animal {
    constructor(name) {
        this.name = name;
    }
    speak() {
        return `I am ${this.name}`;
    }
}
class Dog extends Animal {
    speak() {
        return `Woof! I am ${this.name}`;
    }
}
const dog = new Dog("Buddy");
console.log(dog.speak());
//6. 用函數作為參數的過濾
function filterArray(arr, predicate) {
    return arr.filter(predicate);
}
console.log(filterArray([1, 2, 3, 4, 5], A => A % 2 === 0));
//7. 向量加減與內積
class Vector {
    constructor(A) {
        this.A = A;
    }
    add(B) {
        return new Vector(this.A.map((C, i) => C + B.A[i]));
    }
    sub(B) {
        return new Vector(this.A.map((C, i) => C - B.A[i]));
    }
    dot(B) {
        return this.A.reduce((D, C, i) => D + C * B.A[i], 0);
    }
}
let a = new Vector([1, 2, 3]);
let b = new Vector([4, 5, 6]);
console.log(a.add(b).sub(b).dot(b));
